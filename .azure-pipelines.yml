trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
# 🔐 Azure Login (starter stage)
- stage: AzureLogin
  jobs:
  - job: login
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "✅ Logged in to Azure!"

# 🧱 Terraform Infra
- stage: TerraformInfra
  dependsOn: AzureLogin
  variables:
  - group: terraform-auth

  jobs:
  - job: buildInfra
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "🔐 Registering AKS provider if needed..."
          az provider register --namespace Microsoft.ContainerService
          while true; do
            STATUS=$(az provider show --namespace Microsoft.ContainerService --query registrationState -o tsv)
            echo "Registration status: $STATUS"
            if [ "$STATUS" = "Registered" ]; then
              break
            fi
            echo "Waiting for provider to register..."
            sleep 5
          done

    - script: |
        echo "🧱 Installing Terraform..."
        curl -sLo terraform.zip https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform -v
      displayName: 'Install Terraform'

    - script: |
        cd infra

        echo "🗂️ Initializing Terraform..."
        terraform init -upgrade

        echo "🕵️ Checking if RG is already in state..."
        terraform state list | grep azurerm_resource_group.rg || {
          echo "📦 Importing existing RG into Terraform state..."
          terraform import azurerm_resource_group.rg "/subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/toyshop-rg"
        }

        echo "🚀 Applying Terraform"
        terraform apply -auto-approve
      displayName: 'Run Terraform'
      env:
        TF_VAR_client_id: $(ARM_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_CLIENT_SECRET)
        TF_VAR_subscription_id: $(ARM_SUBSCRIPTION_ID)
        TF_VAR_tenant_id: $(ARM_TENANT_ID)

# 🐳 Build and Push Images
- stage: BuildImages
  dependsOn: TerraformInfra
  jobs:
  - job: buildpushImages
    steps:
    - task: AzureCLI@2  # 🔐 Login to access ACR
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "✅ Logged in to Azure for ACR access"

    - script: |
        make get-azure-resources
      displayName: 'Builds all container images and pushes to ACR'

# 🚀 Deploy to AKS
- stage: DeployToAKS
  dependsOn: BuildImages
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2  # 🔐 Login to pull kube credentials
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "✅ Logged in to Azure to deploy to AKS"

    - script: |
        make deploy-azure
      displayName: 'Deploy to AKS cluster'

# ✨ Install Flux
- stage: InstallFlux
  dependsOn: DeployToAKS
  jobs:
  - job: fluxInstall
    steps:
    - checkout: self

    - task: AzureCLI@2  # 🔐 Login to get AKS access and install Flux
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "🔑 Logging in to AKS"
          az aks get-credentials --resource-group toyshop-rg --name toyshop-aks

          echo "🔧 Installing Flux CLI"
          curl -s https://fluxcd.io/install.sh | bash
          export PATH=$PATH:/home/vsts/.flux/bin

          echo "📦 Bootstrapping Flux"
          flux bootstrap github \
            --owner=ukez15 \
            --repository=technical-code-challenge \
            --branch=main \
            --path=clusters/prod \
            --personal
