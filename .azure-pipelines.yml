trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: AzureLogin
  jobs:
  - job: login
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "‚úÖ Logged in to Azure!"

- stage: TerraformInfra
  dependsOn: AzureLogin
  variables:
  - group: terraform-auth

  jobs:
  - job: buildInfra
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "üîê Registering AKS provider if needed..."
          az provider register --namespace Microsoft.ContainerService
          while true; do
            STATUS=$(az provider show --namespace Microsoft.ContainerService --query registrationState -o tsv)
            echo "Registration status: $STATUS"
            if [ "$STATUS" = "Registered" ]; then
              break
            fi
            echo "Waiting for provider to register..."
            sleep 5
          done

    - script: |
        echo "üß± Installing Terraform..."
        curl -sLo terraform.zip https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform -v
      displayName: 'Install Terraform'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd infra
          terraform init -upgrade

          echo "üîç Checking if resource group exists in Azure..."
          if az group exists --name toyshop-rg | grep true; then
            echo "‚úÖ RG exists ‚Äî checking if it's in state..."
            if ! terraform state list | grep azurerm_resource_group.rg; then
              echo "üì¶ Importing resource group into state..."
              terraform import azurerm_resource_group.rg "/subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/toyshop-rg"
              echo "üì¶ Importing kubernetes cluster into state..."
              terraform import azurerm_kubernetes_cluster.aks "/subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/toyshop-rg/providers/Microsoft.ContainerService/managedClusters/toyshop-aks"
              echo "üì¶ Importing container registry into state..."
              terraform import azurerm_container_registry.acr "/subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/toyshop-rg/providers/Microsoft.ContainerRegistry/registries/toyshopacr12345"
            else
              echo "‚úÖ RG is already in Terraform state."
            fi
          else
            echo "‚úÖ RG does not exist ‚Äî Terraform will create it."
          fi

          terraform apply -auto-approve
      env:
        TF_VAR_client_id: $(ARM_CLIENT_ID)
        TF_VAR_client_secret: $(ARM_CLIENT_SECRET)
        TF_VAR_subscription_id: $(ARM_SUBSCRIPTION_ID)
        TF_VAR_tenant_id: $(ARM_TENANT_ID)


- stage: BuildImages
  dependsOn: TerraformInfra
  jobs:
  - job: buildpushImages
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "‚úÖ Logged in to Azure for ACR"
          make get-azure-resources
        displayName: 'Builds and pushes Docker images to ACR'

- stage: DeployToAKS
  dependsOn: BuildImages
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "‚úÖ Logged in to Azure for Helm deployment"
          make deploy-azure
        displayName: 'Deploy to AKS cluster'

- stage: InstallFlux
  dependsOn: DeployToAKS
  jobs:
  - job: fluxInstall
    steps:
    - checkout: self

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'AzureDevopsSP-MSDN'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "üîë Getting AKS credentials"
          az aks get-credentials --resource-group toyshop-rg --name toyshop-aks

          echo "üîß Installing Flux CLI"
          curl -s https://fluxcd.io/install.sh | bash
          export PATH=$PATH:/home/vsts/.flux/bin

          echo "üöÄ Bootstrapping Flux"
          flux bootstrap github \
            --owner=ukez15 \
            --repository=technical-code-challenge \
            --branch=main \
            --path=clusters/prod \
            --personal
